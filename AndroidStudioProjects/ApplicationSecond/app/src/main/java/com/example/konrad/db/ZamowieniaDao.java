package com.example.konrad.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZAMOWIENIA".
*/
public class ZamowieniaDao extends AbstractDao<Zamowienia, Long> {

    public static final String TABLENAME = "ZAMOWIENIA";

    /**
     * Properties of entity Zamowienia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Produkt = new Property(1, String.class, "Produkt", false, "PRODUKT");
        public final static Property Suma = new Property(2, Float.class, "suma", false, "SUMA");
        public final static Property Data = new Property(3, java.util.Date.class, "data", false, "DATA");
    }


    public ZamowieniaDao(DaoConfig config) {
        super(config);
    }
    
    public ZamowieniaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZAMOWIENIA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUKT\" TEXT," + // 1: Produkt
                "\"SUMA\" REAL," + // 2: suma
                "\"DATA\" INTEGER);"); // 3: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZAMOWIENIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Zamowienia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Produkt = entity.getProdukt();
        if (Produkt != null) {
            stmt.bindString(2, Produkt);
        }
 
        Float suma = entity.getSuma();
        if (suma != null) {
            stmt.bindDouble(3, suma);
        }
 
        java.util.Date data = entity.getData();
        if (data != null) {
            stmt.bindLong(4, data.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Zamowienia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Produkt = entity.getProdukt();
        if (Produkt != null) {
            stmt.bindString(2, Produkt);
        }
 
        Float suma = entity.getSuma();
        if (suma != null) {
            stmt.bindDouble(3, suma);
        }
 
        java.util.Date data = entity.getData();
        if (data != null) {
            stmt.bindLong(4, data.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Zamowienia readEntity(Cursor cursor, int offset) {
        Zamowienia entity = new Zamowienia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Produkt
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // suma
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Zamowienia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProdukt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSuma(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Zamowienia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Zamowienia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Zamowienia entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
